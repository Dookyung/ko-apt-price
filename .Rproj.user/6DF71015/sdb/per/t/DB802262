{
    "contents" : "################################################################################\n# 국토교통부에 접속해서 데이터를 가져오는 함수 모음\n################################################################################\n\nlibrary(jsonlite)\nlibrary(stringr)\nlibrary(log4r)\nlibrary(plyr)\n\nsidos = readRDS(\"data/sido.rds\")\nguguns = readRDS(\"data/gugun.rds\")\ndongs = readRDS(\"data/dong.rds\")\n\n# 전역 로거\nlogFileName = file.path(getwd(), paste0(\"log_\", format(Sys.Date(), \"%Y%m%d\"), \".log\"))\nlogger = create.logger()\nlogfile(logger) = logFileName\nlevel(logger) = \"INFO\"\n\nsavePath = file.path(getwd(), \"data\")\n\n#-------------------------------------------------------------------------------\n# 국토부 실거래가 사이트에 접속해서 데이터를 가져온다.\n# - qryType Trade 매매, Rent 전월세\n# - 가끔씩 request 에러가 발생하므로 10 정도는 retry 해준다.\n#-------------------------------------------------------------------------------\nurl = paste0(\"\")\n\nf_readUrl = function(\n  qryType, sidoCode, gugunCode, dongCode, year, period,\n  warning = function(w) {\n    warn(logger, w)\n    invokeRestart(\"updateTryCount\")\n  },\n  error = function(e) {\n    error(logger, e)\n    invokeRestart(\"updateTryCount\")\n  } \n) {\n  tryCount = 1 \n  houseType = 0\n  tradeType = \"\"\n  \n  if (qryType == \"t\") {\n    houseType = 1\n    tradeType = \"Trade\"\n  } else {\n    houseType = 2\n    tradeType = \"Rent\"\n  } \n  while (tryCount <= 10) {\n    withRestarts(\n      tryCatch(\n        {\n          msg = paste0(\"tring to read, \", dongCode, \"-\", year, \"-\", period)  \n          debug(logger, msg)\n          url = paste0(\"http://rt.molit.go.kr/rtSearch.do?cmd=getApt\", tradeType, \"ListAjax\",\n                       \"&menuGubun=A&srhType=LOC&houseType=\", houseType, \n                       \"&srhYear=\", year, \n                       \"&srhPeriod=\", period,\n                       \"&gubunCode=LAND\",\n                       \"&sidoCode=\", sidoCode,\n                       \"&gugunCode=\", gugunCode,\n                       \"&dongCode=\", dongCode,\n                       \"&rentAmtType=3&areaCode=1\")\n          rawData = readLines(url, encoding=\"UTF-8\")           \n          data = fromJSON(rawData) \n          # list 의 첫번째 원소가 data.frame 이다. \n          # 반환되어 온 자료가 없으면 NULL 을 반환한다.\n          data = data[[1]] \n          if (length(data) > 0) return(data)\n          else return(NULL)\n        },\n        warning = warning,\n        error = error\n      ),\n      updateTryCount = function() {\n        msg = paste(qryType, dongCode, year, period, sep = \"-\")\n        msg = paste0(msg, \", at tryCount: \", tryCount)\n        info(logger, msg)  \n        tryCount <<- tryCount + 1\n      }\n    )\n  }\n  # tryCount 가 3보다 커지면 그냥 NULL 을 반환\n  return(NULL)\n}\n\n#-------------------------------------------------------------------------------\n# 아파트 정보에 추가적인 정보를 생성한다.\n#-------------------------------------------------------------------------------\nf_addInfo = function(apts, dongCode) {\n  sidoCode = substr(dongCode, 1, 2)\n  gugunCode = substr(dongCode, 1, 5)\n  apts$SIDO_CODE = sidoCode \n  apts$GUGUN_CODE = gugunCode\n  apts$DONG_CODE = dongCode\n  apts$DEAL_MM = str_pad(apts$DEAL_MM, 2, pad=\"0\")\n  apts$DEAL_DD= str_pad(apts$DEAL_DD, 2, pad=\"0\")\n  apts$DEAL_DATE = do.call(paste0, apts[,c(\"DEAL_YYYY\", \"DEAL_MM\", \"DEAL_DD\")])\n  apts$DEAL_DATE = strptime(apts$DEAL_DATE, \"%Y%m%d\")\n  apts$DEAL_DATE = as.Date(apts$DEAL_DATE)\n  apts$BLDG_AREA = round(as.numeric(apts$BLDG_AREA))\n  apts = apts[with(apts, order(DEAL_DATE)),]\n  \n  apts$REAL_AREA = -1\n  apts$REAL_AREA_DESC = \"\"  \n  apts[which(apts$BLDG_AREA <= 35), c(\"REAL_AREA\")] = 0\n  apts[which(apts$BLDG_AREA <= 35), c(\"REAL_AREA_DESC\")] = \"(~35)\"\n  apts[which(apts$BLDG_AREA >= 36 & apts$BLDG_AREA <= 40), c(\"REAL_AREA\")] = 1\n  apts[which(apts$BLDG_AREA >= 36 & apts$BLDG_AREA <= 40), c(\"REAL_AREA_DESC\")] = \"(36~40)\"\n  apts[which(apts$BLDG_AREA >= 41 & apts$BLDG_AREA <= 50), c(\"REAL_AREA\")] = 2\n  apts[which(apts$BLDG_AREA >= 41 & apts$BLDG_AREA <= 50), c(\"REAL_AREA_DESC\")] = \"(41~50)\"\n  apts[which(apts$BLDG_AREA >= 51 & apts$BLDG_AREA <= 60), c(\"REAL_AREA\")] = 3\n  apts[which(apts$BLDG_AREA >= 51 & apts$BLDG_AREA <= 60), c(\"REAL_AREA_DESC\")] = \"(51~60)\"\n  apts[which(apts$BLDG_AREA >= 61 & apts$BLDG_AREA <= 70), c(\"REAL_AREA\")] = 4\n  apts[which(apts$BLDG_AREA >= 61 & apts$BLDG_AREA <= 70), c(\"REAL_AREA_DESC\")] = \"(61~70)\"\n  apts[which(apts$BLDG_AREA >= 71 & apts$BLDG_AREA <= 80), c(\"REAL_AREA\")] = 5\n  apts[which(apts$BLDG_AREA >= 71 & apts$BLDG_AREA <= 80), c(\"REAL_AREA_DESC\")] = \"(71~80)\"\n  apts[which(apts$BLDG_AREA >= 81 & apts$BLDG_AREA <= 90), c(\"REAL_AREA\")] = 6\n  apts[which(apts$BLDG_AREA >= 81 & apts$BLDG_AREA <= 90), c(\"REAL_AREA_DESC\")] = \"(81~90)\"\n  apts[which(apts$BLDG_AREA >= 91 & apts$BLDG_AREA <= 100), c(\"REAL_AREA\")]  = 7\n  apts[which(apts$BLDG_AREA >= 91 & apts$BLDG_AREA <= 100), c(\"REAL_AREA_DESC\")] = \"(91~100)\"\n  apts[which(apts$BLDG_AREA >= 101), c(\"REAL_AREA\")]  = 8\n  apts[which(apts$BLDG_AREA >= 101), c(\"REAL_AREA_DESC\")] = \"(101~)\"\n  \n  apts$BLDG_NM = factor(apts$BLDG_NM)\n  apts$GROUP = do.call(paste0, list(apts$BLDG_NM, apts$REAL_AREA_DESC))\n  apts$GROUP = factor(apts$GROUP)\n  apts$SUM_AMT = as.numeric(gsub(\",\", \"\", apts$SUM_AMT))\n  apts$RENT_AMT = as.numeric(gsub(\",\", \"\", apts$RENT_AMT))\n  return (apts)  \n}\n\n#-------------------------------------------------------------------------------\n# 국세청에서 온 자료는 nested 형태이기 때문에 각 row 를 개별 data.frame 으로\n# 변경해야 한다.\n#-------------------------------------------------------------------------------\nf_parseData = function(df, dealYear, dealPeriod) {\n  result1 = data.frame()\n  result2 = data.frame()\n  result3 = data.frame()\n  aptInfo = df[, c(\"BOBN\", \"BLDG_ROW\", \"BLDG_NM\", \"BUBN\", \"BLDG_CD\", \"BUILD_YEAR\", \n                   \"BLDG_CNT\", \"BUILD_ROW\", \"BLDG_AREA\", \"AREA_ROW\", \"AREA_CNT\", \n                   \"BUILD_CNT\")]\n  aptInfo$DEAL_YYYY = dealYear\n  if (df$CNT1[1] > 0) {\n    result1 = cbind(aptInfo, df$month1List[[1]], row.names = NULL)\n    result1$DEAL_MM = (dealPeriod - 1) * 3 + 1\n  }\n  if (df$CNT2[1] > 0) {\n    result2 = cbind(aptInfo, df$month2List[[1]], row.names = NULL)\n    result2$DEAL_MM = (dealPeriod - 1) * 3 + 2\n  }\n  if (df$CNT3[1] > 0) {\n    result3 = cbind(aptInfo, df$month3List[[1]], row.names = NULL)\n    result3$DEAL_MM = (dealPeriod - 1) * 3 + 3\n  }\n  return(rbind(result1, result2, result3))\n}\n\n#-------------------------------------------------------------------------------\n# 특정시기의 자료를 가져온다.\n#-------------------------------------------------------------------------------\nf_getData = function(sidoCode, gugunCode, dongCode, year, period, requestType) {\n  \n  # 실거래가 사이트에서 자료를 가져온다.\n  data = f_readUrl(requestType, sidoCode, gugunCode, dongCode, year, period)  \n  if (is.null(data)) return(NULL)  \n  \n  result = data.frame()\n  # nested column 을 분해해서 data.frame 으로 만든다.\n  for (idx in 1:nrow(data)) {\n    temp = f_parseData(data[idx, ], year, period)\n    result = rbind(result, temp)\n  }\n \n  # 각종 컬럼을 추가한다.\n  result = f_addInfo(result, dongCode)\n  return(result)\n}\n\n#-------------------------------------------------------------------------------\n# 특정 동코드의 연도별 데이터를 생성한다.\n# [수정사항]\n#   2015.09.18  \n#     - 데이터 컬럼을 정렬한다. \n#   2015.10.13\n#     - requestType => r 전월세 t 매매\n#     - 시도, 구군코드 추가\n#-------------------------------------------------------------------------------\nf_dongYearData = function(dongCode, from, to, requestType) {\n  apts = data.frame()\n  sidoCode = substr(dongCode, 1, 2)\n  gugunCode = substr(dongCode, 1, 5)\n  for (year in from:to) {\n    for (period in 1:4) {\n      tempApts = f_getData(sidoCode, gugunCode, dongCode, year, period, requestType)\t\t  \n      apts = rbind(apts, tempApts)\n    }\n  }  \n  if (!is.null(apts)) {\n    if (nrow(apts) != 0) apts = apts[, order(names(apts))]\n  }\n  return(apts) \n}\n\n#-------------------------------------------------------------------------------\n# 두 기간 사이에 걸쳐진 분기들을 반환한다.\n#-------------------------------------------------------------------------------\nf_periods = function(startYear, startPeriod, endYear, endPeriod) {\n  if ((startYear * 100 + startPeriod) > (endYear * 100 + endPeriod))\n    return(NULL)\n  \n  start.period = seq(startPeriod, 4, by = 1)\n  start.year = rep(startYear, length(start.period))\n  start.DF = data.frame(year = start.year, period = start.period) \n  \n  end.period = seq(1, endPeriod, by = 1)\n  end.year = rep(endYear, length(end.period))\n  end.DF = data.frame(year = end.year, period = end.period) \n  \n  midYears = seq(startYear, endYear, by = 1)\n  midYears = setdiff(setdiff(midYears, startYear), endYear)\n  if (length(midYears) == 0) mid.DF = data.frame()\n  else {\n    periods = c(1, 2, 3, 4)\n    mid.years = rep(midYears, each = 4)\n    mid.period = rep(periods, length(midYears))\n    mid.DF = data.frame(year = mid.years, period = mid.period) \n  }\n  \n  return(rbind(start.DF, mid.DF, end.DF))\n}\n\n#-------------------------------------------------------------------------------\n# 조회된 데이터를 파일로 저장\n#-------------------------------------------------------------------------------\nf_dongToFile = function(dongCode, from, to, f_name) {\n  for (srhYear in from:to) {\n    apts = data.frame()\n    for (srhPeriod in 1:4) {\n      tempApts = f_name(dongCode, srhYear, srhPeriod)\t\t \n      apts = rbind(apts, tempApts) \n    }\n    fileName = paste(paste(dongCode, srhYear, sep=\"_\"), \"rds\", sep=\".\")\n    saveRDS(apts, paste(\"data\", fileName, sep=\"/\"))\n    msg = paste(\"successfully write to\", fileName)\n    debug(logger, msg)\n  }  \n}\n\n#-------------------------------------------------------------------------------\n# 입력으로 받은 구군코드들에 대해서 정해진 기간의 데이터를 가져온다.\n# 데이터를 가져오는 실질적인 함수\n# prefix => r 전월세 t 매매\n#-------------------------------------------------------------------------------\nf_crawler = function(gugunCodes, fromYear, toYear,  prefix) { \n  msg = paste0(fromYear, \"~\", toYear, \" for \", prefix) \n  info(logger, msg)\n\n  # 구군단위의 연도별로 데이터 파일을 생성한다.  \n  for (curGugunCode in gugunCodes) { \n    startTime = Sys.time()\n    dongCodes = data.frame()\n    result = data.frame()\n    curDongs = subset(dongs, gugunCode == curGugunCode)[,3]\n\n    for (year in fromYear:toYear) {\n      result = apply(as.data.frame(curDongs), 1, f_dongYearData, year, year, prefix)\n      result = do.call(\"rbind\", result)\n      fileName = paste(paste(prefix, curGugunCode, year, sep=\"_\"), \"rds\", sep=\".\")\n      saveRDS(result, file.path(savePath, fileName))\n    }\n    endTime = Sys.time()\n\n    # 여기서부터 아래는 시간 로깅    \n    gugunIdx = which(curGugunCode == gugunCodes)\n    pct = round((gugunIdx / length(gugunCodes)) * 100, 2)\n    \n    timeTakes = difftime(endTime, startTime)\n    remainTimes = (length(gugunCodes) - gugunIdx) * timeTakes\n    \n    msgTimeTakes = round(as.numeric(timeTakes, units = \"mins\"))\n    msg = paste(curGugunCode, \"takes\", msgTimeTakes, \"mins\")\n    message(msg)\n    info(logger, msg)\n    \n    msgRemainTimes = round(as.numeric(remainTimes, units = \"hours\"), digits = 2)\n    msg = paste(\"Times remains:\", msgRemainTimes, \"hours\")\n    message(msg)\n    info(logger, msg)\n    \n    message(paste0(pct, \"% done.\")) \n    info(logger, paste0(pct, \"% done.\")) \n  } \n  msg = paste(fromYear, \"~\" , toYear, prefix, \"ended\", sep = \" \")\n  info(logger, msg)\n}\n\n#-------------------------------------------------------------------------------\n# 특정기간 구군의 데이터를 읽어들인다.\n#-------------------------------------------------------------------------------\nf_readLocalGugunData = function(tradeType, gugunCode, fromYear, toYear) {\n  files = sapply(fromYear:toYear, \n                 function(year) dir(\"data\", \n                                    paste0(tradeType, \"_\", gugunCode, \"_\", year)))\n  files = sapply(files, function(fileName) file.path(\"data\", fileName))\n  result = lapply(files, function(fileName) readRDS(fileName))\n  result = do.call(\"rbind\", result)\n}\n\n",
    "created" : 1443138176010.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4106927204",
    "id" : "DB802262",
    "lastKnownWriteTime" : 1444724736,
    "path" : "~/Dev/ko-apt-price/helpers.R",
    "project_path" : "helpers.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}