layer_densities()
ggvis(data=region.2010, x=~UNIT_PRICE, fill=~DONG_CODE) %>%
layer_densities()
ggvis(data=region.2010, x=~UNIT_PRICE, fill=~DONG_CODE) %>%
layer_densities()
ggvis(data=region.2010, x=~UNIT_PRICE, fill=~DONG_CODE) %>%
group_by(DONG_CODE) %>%
layer_densities()
?ggvis
ggvis(data=region.2010, x=~UNIT_PRICE) %>%
layer_densities()
ggvis(data=region.2010, x=~UNIT_PRICE) %>%
layer_boxplots()
ggvis(data=region.2010, y=~UNIT_PRICE) %>%
layer_boxplots()
ggvis(data=region.2010, x=~DONG_CODE, y=~UNIT_PRICE) %>%
layer_boxplots()
ggvis(data=region.2010, x=~UNIT_PRICE) %>%
layer_histograms()
source('~/Dev/ko-apt-price/exploratory.R')
source("helpers.R")
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptTradeListAjax&menuGubun=A&srhType=LOC&houseType=1&srhYear=2015&srhPeriod=3&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&chosung=&roadCode=&danjiCode=&rentAmtType=3&fromAmt1=&toAmt1=&fromAmt2=&toAmt2=&fromAmt3=&toAmt3=&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
data
length(data)
class(data)
data[1]
data[2]
data[1]
data[[1]]
data[[2]]
data[[1]][1]
data[[1]][2]
data[[1]][3]
data[[1]][4]
data[[1]][5]
data[[1]][7]
data[[1]][8]
data
data
?fromJSON
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptTradeListAjax&menuGubun=A&srhType=LOC&houseType=1&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&chosung=&roadCode=&danjiCode=&rentAmtType=3&fromAmt1=&toAmt1=&fromAmt2=&toAmt2=&fromAmt3=&toAmt3=&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
data = fromJSON(rawData)
data
data$moth1List
data
class(data)
data[[1]]
x data[[1]]
x = data[[1]]
x
class(x)
x$month1List
class(x$month1List)
a = x$month1List
a
class(a)
a[[1]]
a[[2]]
a
a[[1]]
a[[2]]
a[[3]]
a[[4]]
a[[16]]
x
nrow(x)
x$BOBN
x
a = x$month1List
a
rm(list=ls())
library(jsonlite)
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptTradeListAjax&menuGubun=A&srhType=LOC&houseType=1&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&chosung=&roadCode=&danjiCode=&rentAmtType=3&fromAmt1=&toAmt1=&fromAmt2=&toAmt2=&fromAmt3=&toAmt3=&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
names(data)
data
df = data[[1]]
df
names(df)
df$month1List
df$month1List[[1]]
length(df$month1List)
names(df)
df$CNT1
names(df$month1List)
names(df$month1List[[1]])
df[1]
df
df[,1]
df[1,]
df[1,c("month1List")]
df[1,c("month2List")]
df[1,c("cnt1")]
names(data)
df = data[[1]]
names(df)
df$CNT1
df$month1List[[1]]
df$month1List[[2]]
df$month1List[[5]]
df$month1List
df[1, c("month1List")]
df[2, c("month1List")]
df[3, c("month1List")]
df[5, c("month1List")]
df[5, ]
df[2, c("month1List")]
df[2, ]
df[5, c("month!list")]
df[5, c("month1List")]
unlist(df[5, c("month1List")])
unlist(df$month1List)
x = unlist(df$month1List)
x
x
df
flatten(df)
x = flatten(df)
x
names(x)
x$month1List
x = flatten(df, recursive = TRUE)
xz
x
str(df)
x
df$month1List
df[1, c("month1List")]
x = df[1, c("month1List")]
class(x)
x[[1]]
class(x[[1]])
data = fromJSON(rawData)
names(data)
df = data[[1]]
df
names(data)
names(df)
names(df)
tdf = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "AREA_ROW", "AREA_CNT", "BUILD_CNT")]
tdf
tdf = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT", "BUILD_CNT")]
tdf
tdf
col1 = df$month1List
col1
class(col1)
unlist(col1)
head(tdf)
names(data)
df = data[[1]]
names(df)
col1[[1]]
toDF = function(df) {
aptInfo = c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")
tradeList1 = df$month1List
tradeList1 = tradeList1[[1]]
result = cbind(aptInfo, tradeList1)
return(result)
}
toDF(df[1,])
df[1,]
toDF(df[1,])
toDF = function(df) {
aptInfo = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")]
tradeList1 = df$month1List
tradeList1 = tradeList1[[1]]
result = cbind(aptInfo, tradeList1)
return(result)
}
toDF(df[1,])
names(df)
x = toDF(df[1,])
x
x
x = toDF(df[1,])
?cbind
x
toDF = function(df) {
aptInfo = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")]
tradeList1 = df$month1List
tradeList1 = tradeList1[[1]]
result = cbind(aptInfo, tradeList1, make.row.names = FALSE)
return(result)
}
x = toDF(df[1,])
x
toDF = function(df) {
aptInfo = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")]
tradeList1 = df$month1List
tradeList1 = tradeList1[[1]]
result = cbind(aptInfo, tradeList1)
return(result)
}
x = toDF(df[1,])
x
names(x)
rownames(x)
toDF = function(df) {
aptInfo = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")]
tradeList1 = df$month1List
tradeList1 = tradeList1[[1]]
result = cbind(aptInfo, tradeList1, row.names = NULL)
return(result)
}
x = toDF(df[1,])
x
toDF = function(df) {
aptInfo = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")]
#  tradeList1 = df$month1List
#  tradeList1 = tradeList1[[1]]
result1 = cbind(aptInfo, df$month1List[[1]], row.names = NULL)
result2 = cbind(aptInfo, df$month3List[[1]], row.names = NULL)
result3 = cbind(aptInfo, df$month3List[[1]], row.names = NULL)
return(rbind(result1, result2, result3))
}
x = toDF(df[1,])
x
x = toDF(df[2,])
x
x = toDF(df[2,])
df[2.]
df[2,]
names(df)
df$CNT1
df$CNT1[1]
df$CNT1[1] > 1
toDF = function(df) {
result1 = data.frame()
result2 = data.frame()
result3 = data.frame()
aptInfo = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")]
if (df$CNT1 > 0) result1 = cbind(aptInfo, df$month1List[[1]], row.names = NULL)
if (df$CNT2 > 0) result2 = cbind(aptInfo, df$month1List[[2]], row.names = NULL)
if (df$CNT3 > 0) result3 = cbind(aptInfo, df$month1List[[3]], row.names = NULL)
return(rbind(result1, result2, result3))
}
x = toDF(df[2,])
toDF = function(df) {
result1 = data.frame()
result2 = data.frame()
result3 = data.frame()
aptInfo = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")]
if (df$CNT1[1] > 0) result1 = cbind(aptInfo, df$month1List[[1]], row.names = NULL)
if (df$CNT2[1] > 0) result2 = cbind(aptInfo, df$month1List[[2]], row.names = NULL)
if (df$CNT3[1] > 0) result3 = cbind(aptInfo, df$month1List[[3]], row.names = NULL)
return(rbind(result1, result2, result3))
}
x = toDF(df[2,])
df[2,]
toDF = function(df) {
result1 = data.frame()
result2 = data.frame()
result3 = data.frame()
aptInfo = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")]
if (df$CNT1[1] > 0) result1 = cbind(aptInfo, df$month1List[[1]], row.names = NULL)
if (df$CNT2[1] > 0) result2 = cbind(aptInfo, df$month2List[[1]], row.names = NULL)
if (df$CNT3[1] > 0) result3 = cbind(aptInfo, df$month3List[[1]], row.names = NULL)
return(rbind(result1, result2, result3))
}
x = toDF(df[2,])
x
toDF = function(df, dealYear, dealPeriod) {
result1 = data.frame()
result2 = data.frame()
result3 = data.frame()
aptInfo = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")]
aptInfo$DEALYEAR = dealYear
if (df$CNT1[1] > 0) result1 = cbind(aptInfo, df$month1List[[1]], row.names = NULL)
if (df$CNT2[1] > 0) result2 = cbind(aptInfo, df$month2List[[1]], row.names = NULL)
if (df$CNT3[1] > 0) result3 = cbind(aptInfo, df$month3List[[1]], row.names = NULL)
return(rbind(result1, result2, result3))
}
x = toDF(df[2,], 2015)
x
toDF = function(df, dealYear, dealPeriod) {
result1 = data.frame()
result2 = data.frame()
result3 = data.frame()
aptInfo = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")]
aptInfo$DEALYEAR = dealYear
if (df$CNT1[1] > 0) {
result1 = cbind(aptInfo, df$month1List[[1]], row.names = NULL)
result1$DEAL_MONTH = (dealPeriod - 1) * 3 + 1
}
if (df$CNT2[1] > 0) {
result2 = cbind(aptInfo, df$month2List[[1]], row.names = NULL)
result1$DEAL_MONTH = (dealPeriod - 1) * 3 + 2
}
if (df$CNT3[1] > 0) {
result3 = cbind(aptInfo, df$month3List[[1]], row.names = NULL)
result1$DEAL_MONTH = (dealPeriod - 1) * 3 + 3
}
return(rbind(result1, result2, result3))
}
x = toDF(df[2,], 2015)
x = toDF(df[2,], 2015, 2)
toDF = function(df, dealYear, dealPeriod) {
result1 = data.frame()
result2 = data.frame()
result3 = data.frame()
aptInfo = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")]
aptInfo$DEALYEAR = dealYear
if (df$CNT1[1] > 0) {
result1 = cbind(aptInfo, df$month1List[[1]], row.names = NULL)
result1$DEAL_MONTH = (dealPeriod - 1) * 3 + 1
}
if (df$CNT2[1] > 0) {
result2 = cbind(aptInfo, df$month2List[[1]], row.names = NULL)
result2$DEAL_MONTH = (dealPeriod - 1) * 3 + 2
}
if (df$CNT3[1] > 0) {
result3 = cbind(aptInfo, df$month3List[[1]], row.names = NULL)
result3$DEAL_MONTH = (dealPeriod - 1) * 3 + 3
}
return(rbind(result1, result2, result3))
}
x = toDF(df[2,], 2015, 2)
x
toDF = function(df, dealYear, dealPeriod) {
result1 = data.frame()
result2 = data.frame()
result3 = data.frame()
aptInfo = df[, c("BOBN", "BLDG_ROW", "BLDG_NM", "BUBN", "BLDG_CD", "BUILD_YEAR",
"BLDG_CNT", "BUILD_ROW", "BLDG_AREA", "AREA_ROW", "AREA_CNT",
"BUILD_CNT")]
aptInfo$DEAL_YY = dealYear
if (df$CNT1[1] > 0) {
result1 = cbind(aptInfo, df$month1List[[1]], row.names = NULL)
result1$DEAL_MM = (dealPeriod - 1) * 3 + 1
}
if (df$CNT2[1] > 0) {
result2 = cbind(aptInfo, df$month2List[[1]], row.names = NULL)
result2$DEAL_MM = (dealPeriod - 1) * 3 + 2
}
if (df$CNT3[1] > 0) {
result3 = cbind(aptInfo, df$month3List[[1]], row.names = NULL)
result3$DEAL_MM = (dealPeriod - 1) * 3 + 3
}
return(rbind(result1, result2, result3))
}
x = toDF(df[2,], 2015, 2)
x
x = toDF(df[1,], 2015, 2)
x
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptRentListAjax&menuGubun=A&srhType=LOC&houseType=1&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&chosung=&roadCode=&danjiCode=&rentAmtType=3&fromAmt1=&toAmt1=&fromAmt2=&toAmt2=&fromAmt3=&toAmt3=&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
rawData
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptTradeListAjax&menuGubun=A&srhType=LOC&houseType=1&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&chosung=&roadCode=&danjiCode=&rentAmtType=3&fromAmt1=&toAmt1=&fromAmt2=&toAmt2=&fromAmt3=&toAmt3=&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptTradeListAjax&menuGubun=A&srhType=LOC&houseType=1&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&chosung=&roadCode=&danjiCode=&rentAmtType=3&fromAmt1=&toAmt1=&fromAmt2=&toAmt2=&fromAmt3=&toAmt3=&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptTradeListAjax&menuGubun=A&srhType=LOC&houseType=1&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&chosung=&roadCode=&danjiCode=&rentAmtType=3&fromAmt1=&toAmt1=&fromAmt2=&toAmt2=&fromAmt3=&toAmt3=&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
names(data)
df = data[[1]]
names(df)
x = toDF(df[2,], 2015, 2)
x
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptRentListAjax&menuGubun=A&srhType=LOC&houseType=1&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&chosung=&roadCode=&danjiCode=&rentAmtType=3&fromAmt1=&toAmt1=&fromAmt2=&toAmt2=&fromAmt3=&toAmt3=&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptRentListAjax&menuGubun=A&srhType=LOC&houseType=2&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&chosung=&roadCode=&danjiCode=&rentAmtType=3&fromAmt1=&toAmt1=&fromAmt2=&toAmt2=&fromAmt3=&toAmt3=&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
names(data)
df = data[[1]]
names(df)
x = toDF(df[2,], 2015, 2)
x
df
toDF[df[1,], 2015, 2]
toDF(df[1,], 2015, 2)
df$month1List[[1]]
df$month1List[[2]]
df$month1List[[3]]
df$month1List[[5]]
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptRentListAjax&menuGubun=A&srhType=LOC&houseType=2&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&rentAmtType=3&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
names(data)
df = data[[1]]
names(df)
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptRentListAjax&menuGubun=A&srhType=LOC&houseType=2&srhYear=2015&srhPeriod=2&gubunCode=LAND&dongCode=2826010300&rentAmtType=3&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
names(data)
df = data[[1]]
names(df)
x = toDF(df[2,], 2015, 2)
url = paste0("http://rt.molit.go.kr/rtApt.do?cmd=getAptRentListAjax&menuGubun=A&srhType=LOC&houseType=2&srhYear=2015&srhPeriod=2&gubunCode=LAND&dongCode=2826010300&rentAmtType=3&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
names(data)
df = data[[1]]
names(df)
x = toDF(df[2,], 2015, 2)
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptTradeistAjax&menuGubun=A&srhType=LOC&houseType=2&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&rentAmtType=3&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
rawData = readLines(url, encoding="UTF-8")
rawData = readLines(url, encoding="UTF-8")
rawData = readLines(url, encoding="UTF-8")
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptTradeistAjax&menuGubun=A&srhType=LOC&houseType=2&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&rentAmtType=3&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
names(data)
df = data[[1]]
names(df)
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptTradeistAjax&menuGubun=A&srhType=LOC&houseType=2&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&rentAmtType=3&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptTradeistAjax&menuGubun=A&srhType=LOC&houseType=2&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&rentAmtType=3&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
url = paste0("http://rt.molit.go.kr/rtSearch.do?cmd=getAptRentListAjax&menuGubun=A&srhType=LOC&houseType=2&srhYear=2015&srhPeriod=2&gubunCode=LAND&sidoCode=28&gugunCode=28260&dongCode=2826010300&rentAmtType=3&areaCode=1")
rawData = readLines(url, encoding="UTF-8")
data = fromJSON(rawData)
names(data)
df = data[[1]]
names(df)
source("helpers.R")
rm(list=ls())
source("helpers.R")
x = f_readUrl("Trade", "28", "28260", "2826010300", 2015, 2)
x
source("helpers.R")
x = f_readUrl("Trade", "28", "28260", "2826010300", 2015, 2)
source("helpers.R")
x = f_readUrl("Trade", "28", "28260", "2826010300", 2015, 2)
x
install.packages("jsonlite")
install.packages("stringr")
install.packages("log4r")
install.packages("plyr")
install.packages("shiny")
install.packages("lubridate")
install.packages("dygraphs")
install.packages("ggplot2")
install.packages("ggvis")
library(shiny)
runApp()
runApp()
install.packages("markdown")
runApp()
files = sapply(files, function(fileName) file.path("data", fileName))
library(shiny)
################################################################################
runApp()
runApp()
library(shiny)
shiny::runApp()
shiny::runApp()
library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(httr)
install.packages("httr")
b2 <- "http://httpbin.org/post"
library(httr)
POST(b2, body = "A simple text string")
r <- GET("http:/httpbin.org/get", query=list(key1="value1", key2="value2"))
r <- GET("http://httpbin.org/get", query=list(key1="value1", key2="value2"))
r
r <- GET("http://httpbin.org/get", add_headers(Name="hojoon", Age=37))
r
library(shiny)
runApp(.)
runApp(".")
source("helpers.R")
sidos = readRDS("data/sido.rds")
guguns = readRDS("data/gugun.rds")
dongs = readRDS("data/dong.rds")
f_crawler(guguns$gugunCode, 2015, 2015, "t")
f_crawler(guguns$gugunCode, 2015, 2015, "r")
f_crawler(guguns$gugunCode, 2016, 2016, "t")
f_crawler(guguns$gugunCode, 2016, 2016, "r")
